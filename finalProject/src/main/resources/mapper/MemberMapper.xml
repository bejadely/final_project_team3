<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trip.finalProject.login.mapper.MemberMapper"><!-- 구현! 메서드 명 만들어 놓은 것을 여기서 만들겠다. -->

<!-- namespace와 MemberRepository가 일치하면 됨 -->
    <!--insert는 성공시 1, 실패시 -1을 반환한다  -->
 <!-- 일반회원 회원가입 -->   
    <insert id="insertMember" parameterType="MemberVO">
        insert into member
        			(member_id,
       				 member_Name,
       				 password,      			        			         			 
        			 nationality,
        			 email,
        			 ZIP_CODE,
        			 ADDRESS,
        			 ADDRESS_DETAIL, 
        			 PHONE_NUMBER,
        			 AUTHORITY,  
        			 LOGIN_TYPE,    			  
        			 birth_date,
        			 gender,
        			 SIGN_UP_DATE
        			 )<!--sql칼럼그대로  -->
        values 
			        (  #{memberId} 
			        ,#{memberName}
			        ,#{password}	    
			        ,#{nationality}
			        ,#{email}	   		       
			        ,#{zipCode} 
			        ,#{address}
			        ,#{addressDetail} 
			        ,#{to}	
			        , 'A1'	
			        , 'L1'
			        ,To_date(#{birthDate},'YYYY-mm-dd')		            			        
			        ,#{gender}			     
			        , sysdate
			        )
			      
    </insert>
    
    
     <!-- 가이드 희망 회원 회원가입 -->   
    <insert id="insertGuide" parameterType="MemberVO">
        insert into member
        			(member_id,
       				 member_Name,
       				 password,      			        			         			 
        			 nationality,
        			 email,
        			 ZIP_CODE,
        			 ADDRESS,
        			 ADDRESS_DETAIL, 
        			 PHONE_NUMBER,
        			 bank_Code,
        			 ACCOUNT_NUMBER,
        			 AUTHORITY,  
        			 LOGIN_TYPE,    			  
        			 birth_date,
        			 gender,
        			 SIGN_UP_DATE
        			 )<!--sql칼럼그대로  -->
        values 
			        (  #{memberId} 
			        ,#{memberName}
			        ,#{password}	    
			        ,#{nationality}
			        ,#{email}	   		       
			        ,#{zipCode} 
			        ,#{address}
			        ,#{addressDetail} 
			        ,#{to}				        
			        ,#{bankCode}
        			,#{accountNumber}
			        , 'A4'	
			        , 'L1'
			        ,To_date(#{birthDate},'YYYY-mm-dd')			            			        
			        ,#{gender}			     
			        ,sysdate)
			      
    </insert>
    
    
    
    
    
    
    
    <!-- 로그인 처리 -->
    <!--select는 실패시 빈 결과나 null을 반환한다.  -->
    <!--  만약에 select문에 id만 담으면 나중에 session에서 name 안담김. -->
    <!--  별개로 마이페이지에서 내 정보 조회할 때 또 select문 쓸 것임 이때는 갖고오고 싶은 정보들만 select하면 됨. 이때 폰넘버 필요하면 폰넘버도 가져오기 -->
    <select id="login" resultType="MemberVO"> <!-- MemberVO? -->
       SELECT 		*
         FROM 		member
         WHERE       member_id = #{memberId}
         AND		password = #{password}  
     <!--    WHERE       member_id = #{memberId}
      	 AND		password = #{password} -->
    </select>
    
    <!--로그인 멤버 정보확인  -->
	<select id= "checkLoginAccount" resultType="MemberVO">
	SELECT * FROM member
	WHERE id =#{memberId} AND Password =#{password}
	
<!-- 	<if test="memberPassword !=null">
		AND memberPassword =#{memberPassword}
	</if>	
	<if test="memberMobile !=null">
		AND memberMobile =#{memberMobile}
	</if> -->
	</select>
   
    <!--  회원가입시 아이디 중복체크 -->
    <select id= "checkId" resultType="int">
    select count(*) from member where member_id = #{memberId}
    </select>
    
    
    <!-- 입력한 휴대폰 번호로 해당 ID 찾기 -->
    <select id= "checkIdByPhoneNumber" resultType="MemberVO">
    select member_id from member where phone_number = #{phoneNumber}
    </select>
    
    
    <!--  입력한 이메일에 대한 비번 수정  -->
    	<update id="editPassword" parameterType="MemberVO">
		UPDATE member
		<set>
			<if test="password != null and !password.equals('')">
				password = #{password}			
			</if>		
		</set>
		WHERE email = #{email}	
	</update>
    
    <!-- 회원정보 불러오기 -->
	<select id="memebrInfo" resultType="MemberVO">
	SELECT member_id
		 , member_name
		 , password
		 , nationality
		 , email
		 , zip_code
		 , address
		 , address_detail
		 , phone_number
		 , code_val(authority) authority
		 , origin_profile_img
		 , saved_profile_img
		 , code_val(bank_code) bank_code
		 , account_number
		 , login_type
		 , access_token
		 , refresh_token
		 ,To_date(#{birthDate},'YYYY-mm-dd')		
		 , code_val(gender) gender
		 , punish_count
		 , sign_up_date
		 , withdrawal_date
	FROM member
	WHERE member_id = #{memberId}
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="updateMember" parameterType="MemberVO">
		UPDATE member
		<set>
			<if test="password != null and !password.equals('')">
				password = #{password},			
			</if>
			<if test="bankCode != null and !bankCode.equals('')">
				bank_code=#{bankCode},			
			</if>
			zip_code = #{zipCode},
			address = #{address},
			address_detail=#{addressDetail},
			email = #{email},
			phone_number = #{phoneNumber},
			account_number = #{accountNumber}
		</set>
		WHERE member_id = #{memberId}	
	</update>
	
	<select id="singleLogin" resultType="MemberVO">
		SELECT *
		FROM member
		WHERE member_id = #{memberId}
	</select>
	
	<select id="passwordVerify" resultType="MemberVO">
	SELECT member_id, password
	FROM member
	WHERE member_id = #{memberId}
	
	</select>
    
     
</mapper>